remove(fit)
remove(fit1)
remove(fit2)
remove(fit3)
remove(fit4)
remove(fit5)
remove(fit6)
remove(g)
remove(rootNode)
remove(se)
remove(doc)
inTrain <- createDataPartition(y = training$classe, p = .6, list = FALSE)
training2 <- training[inTrain,]
testing <- training[-inTrain,]
install.packages("caret"); library(caret)
inTrain <- createDataPartition(y = training$classe, p = .6, list = FALSE)
training2 <- training[inTrain,]
testing <- training[-inTrain,]
setseed(12345)
set.seed(12345)
inTrain <- createDataPartition(y = training$classe, p = .6, list = FALSE)
training2 <- training[inTrain,]
testing <- training[-inTrain,]
rfmod <- train(classe~., data = training2, method = "rf", prox = TRUE)
?remove
clear()
install.packages("shiny")
install.packages("devtools")
library(devtools)
install_github("slidify", 'ramathv')
install_github('slidify', 'ramathv')
install_github('slidify', 'ramathv')
package(lm)
lm()
lm
colSums
?lm
?colSums
?dgammma
?dgamma
?predict
install.packages("methods")
install.packages("methods")
install.packages("methods")
install.packages("methods")
library(methods)
?Classes
?Methods
?getMethod
?showMethods
getMethod(lm)
getMethod(sum)
showMethods(sum)
?yhat
showMethods(predict)
showMethods(dgamma)
showMethods(lm)
showMethods(colSums)
Methods(colSums)
Method(colSums)
methods(colSums)
methods(dgamma)
methods(lm)
methods(predict)
getMethod(plot)
load("/Users/maryahlquist/CSRAProject/capstoneproject.RData")
y = list()
z = 0
for(i in 1:2) {
x <- 10
while(x[1] == 10) {
x[length(x)+1] <- x[1]  ##Move 10 to end of x vector
x[1] <- sample(1:10, 1, replace = TRUE) ##New d10 roll
}
y[[i]] <- x ##save as element of a list
z[i] <- sum(x) ##save sum in a vector
}
y
length(y)
sort(c(3,10,2,8,5), decreasing = TRUE)
c(3,10,2,8,5) != 10
exp10s <- function(total, kept) {
roll <- sample(1:10, total, replace = TRUE)
tens <- sum(roll == 10) ## number of 10s in first roll
y = list()
z = 0
if(tens > 0) {
for(i in 1:tens) {
x <- 10
while(x[1] == 10) {
x[length(x)+1] <- x[1]  ##Move 10 to end of x vector
x[1] <- sample(1:10, 1, replace = TRUE) ##New d10 roll
}
y[[i]] <- x ##save as element of a list
z[i] <- sum(x) ##save sum in a vector
}
}
w <- list() #new list to reorder y
if(length(y) < kept){ #avoid exceeding index of w
foo <- length(y)
} else {
foo <- length(kept)
}
keepers <- sort(roll, decreasing = TRUE)[1:kept]## original kept numbers
keepers <- keepers[keepers != 10] ##remove 10s (since they are in y)
if(length(y) > 0) {
for(i in 1:foo) {
w[[i]] <- y[[which.max(z)]] #first element of w is largest sum of y
z[which.max(z)] <- 0
}
for(j in 1:length(w)) { # adding exploded 10s to
keepers <- append(keepers, w[[j]])
}
}
list("Total" = sum(keepers), "Keepers" = keepers, "Original Roll" = roll)
}
exp10s(5,3)
exp10s(5,3)
exp10s(5,3)
exp10s <- function(total, kept) {
roll <- c(10, 8, 8, 10, 9, 3, 10)
tens <- sum(roll == 10) ## number of 10s in first roll
y = list()
z = 0
if(tens > 0) {
for(i in 1:tens) {
x <- 10
while(x[1] == 10) {
x[length(x)+1] <- x[1]  ##Move 10 to end of x vector
x[1] <- sample(1:10, 1, replace = TRUE) ##New d10 roll
}
y[[i]] <- x ##save as element of a list
z[i] <- sum(x) ##save sum in a vector
}
}
w <- list() #new list to reorder y
if(length(y) < kept){ #avoid exceeding index of w
foo <- length(y)
} else {
foo <- length(kept)
}
keepers <- sort(roll, decreasing = TRUE)[1:kept]## original kept numbers
keepers <- keepers[keepers != 10] ##remove 10s (since they are in y)
if(length(y) > 0) {
for(i in 1:foo) {
w[[i]] <- y[[which.max(z)]] #first element of w is largest sum of y
z[which.max(z)] <- 0
}
for(j in 1:length(w)) { # adding exploded 10s to
keepers <- append(keepers, w[[j]])
}
}
list("Total" = sum(keepers), "Keepers" = keepers, "Original Roll" = roll)
}
exp10s(6,3)
exp10s <- function(total, kept) {
roll <- sample(1:10, total, replace = TRUE)
tens <- sum(roll == 10) ## number of 10s in first roll
y = list()
z = 0
if(tens > 0) {
for(i in 1:tens) {
x <- 10
while(x[1] == 10) {
x[length(x)+1] <- x[1]  ##Move 10 to end of x vector
x[1] <- sample(1:10, 1, replace = TRUE) ##New d10 roll
}
y[[i]] <- x ##save as element of a list
z[i] <- sum(x) ##save sum in a vector
}
}
w <- list() #new list to reorder y
if(length(y) < kept){ #avoid exceeding index of w
foo <- length(y)
} else {
foo <- length(kept)
}
keepers <- sort(roll, decreasing = TRUE)[1:kept]## original kept numbers
keepers <- keepers[keepers != 10] ##remove 10s (since they are in y)
if(length(y) > 0) {
for(i in 1:foo) {
w[[i]] <- y[[which.max(z)]] #first element of w is largest sum of y
z[which.max(z)] <- 0
}
for(j in 1:length(w)) { # adding exploded 10s to
keepers <- append(keepers, w[[j]])
}
}
list("Total" = sum(keepers), "Keepers" = keepers, "Original Roll" = roll)
}
exp10s(8,4)
exp10s(8,4)
exp10s(8,4)
exp10s(8,4)
vec <- c(3,10,2,8,5)
sort(vec, decreasing=TRUE)[1:2]
sort(vec, decreasing=TRUE)[1:2] != 10
sort(vec[vec != 10], decreasing = TRUE)
sort(vec[vec != 10], decreasing = TRUE)[1:2]
exp10s <- function(total, kept) {
roll <- sample(1:10, total, replace = TRUE)
tens <- sum(roll == 10) ## number of 10s in first roll
y = list()
z = 0
if(tens > 0) {
for(i in 1:tens) {
x <- 10
while(x[1] == 10) {
x[length(x)+1] <- x[1]  ##Move 10 to end of x vector
x[1] <- sample(1:10, 1, replace = TRUE) ##New d10 roll
}
y[[i]] <- x ##save as element of a list
z[i] <- sum(x) ##save sum in a vector
}
}
w <- list() #new list to reorder y
if(length(y) < kept){ #avoid exceeding index of w
foo <- length(y)
} else {
foo <- length(kept)
}
keepers <- keepers[keepers != 10] ##remove 10s (since they are in y)
keepers <- sort(roll, decreasing = TRUE)[1:kept] ## original kept numbers
if(length(y) > 0) {
for(i in 1:foo) {
w[[i]] <- y[[which.max(z)]] #first element of w is largest sum of y
z[which.max(z)] <- 0
}
for(j in 1:length(w)) { # adding exploded 10s to
keepers <- append(keepers, w[[j]])
}
}
list("Total" = sum(keepers), "Keepers" = keepers, "Original Roll" = roll)
}
exp10s(4,2)
exp10s <- function(total, kept) {
roll <- sample(1:10, total, replace = TRUE)
tens <- sum(roll == 10) ## number of 10s in first roll
y = list()
z = 0
if(tens > 0) {
for(i in 1:tens) {
x <- 10
while(x[1] == 10) {
x[length(x)+1] <- x[1]  ##Move 10 to end of x vector
x[1] <- sample(1:10, 1, replace = TRUE) ##New d10 roll
}
y[[i]] <- x ##save as element of a list
z[i] <- sum(x) ##save sum in a vector
}
}
w <- list() #new list to reorder y
if(length(y) < kept){ #avoid exceeding index of w
foo <- length(y)
} else {
foo <- length(kept)
}
keepers <- roll[roll != 10] ##remove 10s (since they are in y)
keepers <- sort(keepers, decreasing = TRUE)[1:kept] ## original kept numbers
if(length(y) > 0) {
for(i in 1:foo) {
w[[i]] <- y[[which.max(z)]] #first element of w is largest sum of y
z[which.max(z)] <- 0
}
for(j in 1:length(w)) { # adding exploded 10s to
keepers <- append(keepers, w[[j]])
}
}
list("Total" = sum(keepers), "Keepers" = keepers, "Original Roll" = roll)
}
exp10s(4,2)
exp10s(4,2)
exp10s(4,2)
exp10s(4,2)
exp10s(4,2)
exp10s(4,2)
exp10s(4,2)
vec
exp10s <- function(total, kept) {
roll <- sample(1:10, total, replace = TRUE)
tens <- sum(roll == 10) ## number of 10s in first roll
y = list()
z = 0
if(tens > 0) {
for(i in 1:tens) {
x <- 10
while(x[1] == 10) {
x[length(x)+1] <- x[1]  ##Move 10 to end of x vector
x[1] <- sample(1:10, 1, replace = TRUE) ##New d10 roll
}
y[[i]] <- x ##save as element of a list
z[i] <- sum(x) ##save sum in a vector
}
}
w <- list() #new list to reorder y
if(length(y) < kept){ #avoid exceeding index of w
foo <- length(y)
} else {
foo <- kept
}
keepers <- sort(roll, decreasing = TRUE)[1:kept] ## original kept numbers
keepers <- keepers[keepers != 10] ##remove 10s (since they are in y)
if(length(y) > 0) {
for(i in 1:foo) {
w[[i]] <- y[[which.max(z)]] #first element of w is largest sum of y
z[which.max(z)] <- 0
}
for(j in 1:length(w)) { # adding exploded 10s to
keepers <- append(keepers, w[[j]])
}
}
list("Total" = sum(keepers), "Keepers" = keepers, "Original Roll" = roll)
}
exp10s(3,2)
exp10s(3,2)
exp10s(3,2)
exp10s(3,2)
exp10s(3,2)
exp10s(3,2)
exp10s(3,2)
exp10s(3,2)
exp10s(3,2)
exp10s(3,2)
exp10s(3,2)
exp10s(3,2)
exp10s(3,2)
exp10s(3,2)
exp10s(3,2)
exp10s(3,2)
exp10s(3,2)
exp10s(3,2)
exp10s(3,2)
exp10s(3,2)
exp10s(3,2)
exp10s(3,2)
library(shiny)
library(shiny); library(shinyapps)
runApp()
setwd("~/CSRAProject/Capstone/Shiny Predictor")
runApp()
require(devtools) devtools::install_github('rstudio/shinyapps')
require(devtools); install_github('rstudio/shinyapps')
runApp()
load("/Users/maryahlquist/CSRAProject/Capstone/Shiny Predictor/data.Rdata")
next.word
next.word <- function(phrase) {
wordMatch <- c("waiting")
split <- strsplit(phrase, " ") #break up string to search rows
phraseLength <- length(split[[1]])
if(phraseLength > 4) {
words <- split[[1]][(phraseLength-3):phraseLength] #just want the last four words
} else {
words <- split[[1]]
}
while(length(words) > 0){
if(length(words) == 4 ) {
wordMatch <- quinCountdf[Reduce(intersect, list(
grep(paste("^", words[1], "$", sep = ""), quinCountdf$X1),
grep(paste("^", words[2], "$", sep = ""), quinCountdf$X2),
grep(paste("^", words[3], "$", sep = ""), quinCountdf$X3),
grep(paste("^", words[4], "$", sep = ""), quinCountdf$X4))),]
} else if(length(words) == 3) {
wordMatch <- tetraCountdf[Reduce(intersect, list(
grep(paste("^", words[1], "$", sep = ""), tetraCountdf$X1),
grep(paste("^", words[2], "$", sep = ""), tetraCountdf$X2),
grep(paste("^", words[3], "$", sep = ""), tetraCountdf$X3))),]
} else if(length(words) == 2) {
wordMatch <- triCountdf[Reduce(intersect, list(
grep(paste("^", words[1], "$", sep = ""), triCountdf$X1),
grep(paste("^", words[2], "$", sep = ""), triCountdf$X2))),]
} else if(length(words) == 1) {
wordMatch <- biCountdf[grep(paste("^", words[1], "$", sep = ""), biCountdf$X1),]
}
if(is.na(as.character(wordMatch[1,1]))){
words <- words[-1]
} else {length(words) <- 0}
}
if(!is.na(as.character(wordMatch[1,1])))
{
as.character(wordMatch[which.max(wordMatch$freq),ncol(wordMatch)-1])
} else {
"the"
}
}
load("/Users/maryahlquist/CSRAProject/Capstone/Shiny Predictor/data.Rdata")
next.word <- function(phrase) {
wordMatch <- c("waiting")
split <- strsplit(phrase, " ") #break up string to search rows
phraseLength <- length(split[[1]])
if(phraseLength > 4) {
words <- split[[1]][(phraseLength-3):phraseLength] #just want the last four words
} else {
words <- split[[1]]
}
while(length(words) > 0){
if(length(words) == 4 ) {
wordMatch <- quinCountdf[Reduce(intersect, list(
grep(paste("^", words[1], "$", sep = ""), quinCountdf$X1),
grep(paste("^", words[2], "$", sep = ""), quinCountdf$X2),
grep(paste("^", words[3], "$", sep = ""), quinCountdf$X3),
grep(paste("^", words[4], "$", sep = ""), quinCountdf$X4))),]
} else if(length(words) == 3) {
wordMatch <- tetraCountdf[Reduce(intersect, list(
grep(paste("^", words[1], "$", sep = ""), tetraCountdf$X1),
grep(paste("^", words[2], "$", sep = ""), tetraCountdf$X2),
grep(paste("^", words[3], "$", sep = ""), tetraCountdf$X3))),]
} else if(length(words) == 2) {
wordMatch <- triCountdf[Reduce(intersect, list(
grep(paste("^", words[1], "$", sep = ""), triCountdf$X1),
grep(paste("^", words[2], "$", sep = ""), triCountdf$X2))),]
} else if(length(words) == 1) {
wordMatch <- biCountdf[grep(paste("^", words[1], "$", sep = ""), biCountdf$X1),]
}
if(is.na(as.character(wordMatch[1,1]))){
words <- words[-1]
} else {length(words) <- 0}
}
if(!is.na(as.character(wordMatch[1,1])))
{
as.character(wordMatch[which.max(wordMatch$freq),ncol(wordMatch)-1])
} else {
"the"
}
}
getwd()
save.image("~/CSRAProject/Capstone/Shiny Predictor/data.Rdata")
runApp
runApp()
runApp()
runApp()
runApp()
load("/Users/maryahlquist/CSRAProject/Capstone/Shiny Predictor/data.Rdata")
runApp()
runApp()
?write.csv
getwd()
setwd("~/CSRAProject/Capstone/Shiny Predictor/data")
write.csv(biCountdf, "biCount.csv")
write.csv(triCountdf, "triCount.csv")
write.csv(tetraCountdf, "tetraCount.csv")
write.csv(quinCountdf, "quinCount.csv")
getwd()
setwd("~/CSRAProject/Capstone/Shiny Predictor")
runApp()
setwd("~/CSRAProject/Capstone/Shiny Predictor/data")
?saveRDS
saveRDS(biCountdf, file = "biCount.rds")
saveRDS(triCountdf, file = "triCount.rds")
saveRDS(tetraCountdf, file = "tetraCount.rds")
saveRDS(quinCountdf, file = "quinCount.rds")
setwd("~/CSRAProject/Capstone/Shiny Predictor")
runApp()
runApp()
runApp()
biCount2 <- read.csv("data/biCount.csv")
head(biCount2)
head(biCountdf)
remove(biCount2)
biCount2 <- readRDS("biCount.rds")
biCount2 <- readRDS("data/biCount.rds")
head(biCount2)
runApp()
next.word
data.frame()
runApp()
getwd()
list.files()
getwd()
setwd("~/CSRAProject/Capstone")
twitter <- scan("en_US/en_US.twitter.txt", character(0), sep = "\n")
tweets <- sample(1:length(twitter), 100, replace = FALSE)
save.image("~/CSRAProject/Capstone/markdown data.Rdata")
profanity <- "(?i)fuck|^arse$|^ass[cbchjkmprw]|^beatoff$|^beat.off$|^biatch$|^bitch[^ ]|^blowjob$|^byatch$|cameljockey|cameltoe|carpetmuncher|cherrypopper|choad|chode|coondog|^cock[bs]|crackwhore|crack.whore|^crap|^cum[dfjs]|^cum$|^cunt|^dago$|^damn|^darky|^darkie|^dego$|dick[hlw]|^dong$|^fag$|^faggot$|^fart$|^felch|^godam|^goddam|^handjob|^honkers|^hooker|^ho$|^hore$|^horny|^jackoff|^jerkoff|^jiz|^kike$|^kyke|^krap|^kum[^q]|^kunt|^love[jmpgb]|^milf$|^mastur|^mofo|^muffdive|^negro$|^nigga$|^nigger$|^nookie|^phuk|^piss|^pooper|^pube|^puss.|^queef|^shat|shit|^skank|^slut|^snig|^spick$|^stripclub|^strip.club|^titty|^tittie|^tranny|^trannie|^twat|^wank|^wetback|^whore|whore$|\u0092|\u0094|\u0095|\u0096|\u0097|\u0098|\u0099"
control <- Weka_control(min=2, max=2, delimiters = "\\r\\n\\t.,;:\"()!? ")
library(RWeka)
control <- Weka_control(min=2, max=2, delimiters = "\\r\\n\\t.,;:\"()!? ")
next.word
next.word("meet up at")
next.word("up at the")
next.word("the road turns")
next.word("let's paint")
next.word("at the mall we")
next.word("throw me that")
next.word("throw that")
next.word("going to the movies and")
next.word("quit working and")
next.word("I want to")
next.word("I want to be")
next.word("this course was the")
tweetTokens <- NGramTokenizer(twitter[tweets], control)
head(tweetTokens)
library(slidify)
author("Final Pres")
setwd("~/CSRAProject/Capstone/Final Pres")
slidify("Final Pres")
slidify("Final Pres.Rmd")
require(knitr)
control <- Weka_control(min=2, max=2, delimiters = "\\r\\n\\t.,;:\"()!? ")
?scan
getwd()
twitter <- scan("en_US.twitter.txt", character(0), sep = "\n")
?write.txt
?saveRDS
saveRDS(twitter[1:100], file = "twitter100.rds")
twitter <- readRDS("twitter100.rds")
twitter
tweetTokens <- NGramTokenizer(twitter, control)
tweetTokens[1:30]
head(count(tweetTokens))
library(plyr)
head(count(tweetTokens))
profanity
